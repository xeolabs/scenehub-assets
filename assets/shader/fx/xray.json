{
    "shaders":[
        {
            "stage":"fragment",

            "code":[
                "uniform bool   xrayEnabled;",
                "uniform float  xrayOpacity;",
                "uniform bool   xrayColor;",
                "uniform bool   highlightEnabled;",

                "vec3           _std_worldNormal = vec3(0.0, 0.0,  1.0);",
                "vec3           _std_worldEyeVec = vec3(0.0, 0.0, -1.0);",

                "void _std_WorldNormalFunc(vec3 vec) {",
                "   _std_worldNormal = vec;",
                "}",

                "void _std_WorldEyeVecFunc(vec3 vec) {",
                "   _std_worldEyeVec = vec;",
                "}",

                "vec4 _std_PixelColorFunc(vec4 color) {",
                "   if (highlightEnabled) {",
                "       float intensity = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;",
                "       color = vec4((intensity * -0.1) + color.rgb * (1.0 + 0.1), 1.0);",
                "       color.r = clamp(color.r * 1.5, 0.3, 1.0);",
                "       color.g = clamp(color.g * 1.5, 0.3, 1.0);",
                "       color.b = color.b * 0.5;",
                "   }",

                "   if (xrayEnabled && xrayOpacity < 1.0) {",

                "       if (xrayColor) {",
                "           color.a = (xrayOpacity + 0.9 - abs(dot(_std_worldNormal, _std_worldEyeVec)));",
                "       } else {",
                "           color = vec4(0.2, 0.2, 0.3, (xrayOpacity + 0.9 - abs(dot(_std_worldNormal, _std_worldEyeVec))));",
                "       }",
                "   }",

                "   return color;",
                "}"
            ],

            "hooks":{
                "worldNormal":"_std_WorldNormalFunc",
                "worldEyeVec":"_std_WorldEyeVecFunc",
                "pixelColor":"_std_PixelColorFunc"
            }
        }
    ],

    "params":{
        "xrayOpacity":0.0,
        "xrayColor":true
    }
}